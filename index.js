'use strict';

var gulp = require('gulp');
var merge = require('merge');
var rollup = require('rollup');
var resolve = require( 'rollup-plugin-node-resolve' );
var commonjs = require( 'rollup-plugin-commonjs' );
var typescript = require('rollup-plugin-typescript2');
var uglify = require('gulp-uglify-es').default;
var rename = require("gulp-rename");


function entry( changes ) {

    var options = {
        name:'main',
        dest:'public/out',
        src: './src/main.ts',
        rollup: {
            inputOptions: {
                plugins: [
                    typescript( { check:false } ),
                    resolve( { jsnext: true, main: true, browser:true } ),
                    commonjs(),
                ]
            },
            outputOptions: { format: 'iife', sourcemap: true }
        },
        uglify: {}
    }

    function lnminify(){
        return gulp.src( options.dest + "/" + options.rollup.outputOptions.name + ".js" )
            .pipe( rename( options.rollup.outputOptions.name + ".min.js") )
            .pipe( uglify( options.uglify ) )
            .pipe( gulp.dest( options.dest ) );
    
    }
    
    function lnbundle(){
        return rollup.rollup( options.rollup.inputOptions ).then( bundle => {
            return bundle.write( options.rollup.outputOptions );
        });
    }


    options = merge.recursive( options, changes );

    // inject autogenerated settings
    let r = options.rollup;
    r.inputOptions.input = ( r.inputOptions.input ) ? r.inputOptions.input : options.src, 
    r.outputOptions.file = ( r.outputOptions.file ) ? r.outputOptions.file : options.dest + '/' + options.name + '.js', 
    r.outputOptions.name = ( r.outputOptions.name ) ? r.outputOptions.name : options.name;

    return gulp.series( lnbundle, lnminify );
}

module.exports = entry;